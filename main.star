load("encoding/base64.star", "base64")
load("render.star", "render")
load("encoding/json.star", "json")
load("http.star", "http")
load("time.star", "time")
load("cache.star", "cache")
load("animation.star", "animation")
load("random.star", "random")


# API_URL = "https://tennisapi1.p.rapidapi.com/api/tennis/events/"
API_URL = "http://localhost:8000/"
CACHE_TTL = 43200 # half a day 


def main(config):
	app_frames = []
#	app_frames.extend(animated_transition())
	app_frames.extend(match_frames())
	return render.Root(child = render.Animation(children = app_frames))

def match_frames():
	match = get_random_match()
	return [animation.Transformation(
		child = render.Stack(
			children = [
				render.Column(
					children=[
						tournament_widget(match['tournament']),
						player_widget(match['player_1']),
						player_widget(match['player_2']),
						details_widget(match),
					],
				)
			]
		),
		duration = 0,
		keyframes = []
	) for i in range(120)]

def player_widget(player):
	return render.Row(
		children=[
			render.Box(width=2, height=5, padding=2, color=player['colors']['primary']),
			render.Box(width=2, height=5, padding=2, color=player['colors']['secondary']),
			render.Text(content=player['name'], font="tom-thumb"),
     ],
)

def tournament_widget(tournament):
	icon_url = "https://user-images.githubusercontent.com/244265/212588299-954c3f65-1502-4f07-9a10-bf515930fbb1.png"
	return render.Row(
		cross_align="center",
		main_align="center",
		children=[
			render.Image(
				src = http.get(icon_url).body(),
				height = 9,
				width = 9,
			),
			render.Marquee(
				width=54,
				height=9,
				child=render.Text(content=tournament.upper(), font="CG-pixel-4x5-mono", color="#8cff00"),
				offset_start=0,
				offset_end=32,
			)
		]
	)

def details_widget(match):
	return render.Row(
		children=[
			render.Text(content=str(match["date"]), font="tom-thumb"),
			render.Text(content=match["round"], font="tom-thumb"),
		]
	)


def get_random_match():
	matches = fetch_matches_for('matches.json')
	random_number = random.number(0, 100)
	filtered_match = filter_match_info(matches[random_number])
	print(filtered_match)
	return filtered_match


def fetch_matches_for(date):
	cached_matches = cache.get("tennis_matches_" + date)
	if cached_matches: 
		matches = json.decode(cached_matches)
	else: 
		req = http.get(API_URL + date)
		if req.status_code != 200:
			fail("Request failed with status %d", req.status_code)
		response = req.json()
		matches = response['events']
	cache.set("tennis_matches_" + date, json.encode(matches), ttl_seconds=CACHE_TTL)

	return matches


def filter_match_info(match):
	if match['tournament']['uniqueTournament']['slug'] == 'australian-open': 
		match_filtered = {
			'tournament': match['tournament']['uniqueTournament']['name'],
			'round': match['roundInfo']['name'],
			'date': time.from_timestamp(int(match['startTimestamp'])),
			'player_1': {
				'name': match['homeTeam']['shortName'],
				'colors': match['homeTeam']['teamColors']
			},
			'player_2': {
				'name': match['awayTeam']['shortName'],
				'colors': match['awayTeam']['teamColors']
			}
		}

		return match_filtered
	return {}


def animated_transition():
	FRAMES = [
	"""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""",
	]
	return [render.Image(src = base64.decode(f)) for f in FRAMES]
